@page "/searchpaging"
@using BlazorAzureSearch.Shared
@inject HttpClient Http
@inject NavigationManager NavManager

<EditForm Model="@SearchData">
    <div class="searchBoxForm">
        <InputText @bind-Value="SearchData.SearchText" class="searchBox"></InputText>
        <input class="searchBoxSubmit" @onclick="Search">
    </div>
</EditForm>

@if (SearchData.Results.PersonCities != null)
{
    <p class="sampleText">
        Found @SearchData.Results.TotalCount Documents
    </p>

    var results = SearchData.Results.PersonCities;

    @for (var i = 0; i < results.Count; i++)
    {
        <div>
            <b><span><a href="@results[i].Web">@results[i].Name @results[i].FamilyName</a>: @results[i].CityCountry</span></b>
            @if (!string.IsNullOrEmpty(results[i].Twitter))
            {
                <a href="@results[i].Twitter"><img src="/images/socialTwitter.png" /></a>
            }
            @if (!string.IsNullOrEmpty(results[i].Github))
            {
                <a href="@results[i].Github"><img src="/images/github.png" /></a>
            }
            @if (!string.IsNullOrEmpty(results[i].Mvp))
            {
                <a href="@results[i].Mvp"><img src="/images/mvp.png" width="24" /></a>
            }
            <br />
            <em><span>@results[i].Metadata</span></em><br />
            <textarea class="infotext">@results[i].Info</textarea>
            <br />
        </div>
    }
}

@if (SearchData.PageCount > 1)
{
    <table>
        <tr>
            <td>
                @if (SearchData.CurrentPage > 0)
                {
                    <p class="pageButton">
                        <a href="/searchpaging?paging=0&SearchText=@SearchData.SearchText">|&#60;</a>
                    </p>
                }
                else
                {
                    <p class="pageButtonDisabled">|&lt;</p>
                }
            </td>

            <td>
                @if (SearchData.CurrentPage > 0)
                {
                    <p class="pageButton">
                        <a href="/searchpaging?paging=prev&SearchText=@SearchData.SearchText">&#60;</a>
                    </p>
                }
                else
                {
                    <p class="pageButtonDisabled">&lt;</p>
                }
            </td>

            @for (var pn = SearchData.LeftMostPage; pn < SearchData.LeftMostPage + SearchData.PageRange; pn++)
            {
                <td>
                    @if (SearchData.CurrentPage == pn)
                    {
                        <p class="pageSelected">@(pn + 1)</p>
                    }
                    else
                    {
                        <p class="pageButton">
                            @{var p1 = SearchData.PageCount - 1;}
                            <a href="/searchpaging?paging=@pn&SearchText=@SearchData.SearchText">@(pn + 1)</a>
                        </p>
                    }
                </td>

            }

            <td>
                @if (SearchData.CurrentPage < SearchData.PageCount - 1)
                {
                    <p class="pageButton">
                        @{var p1 = SearchData.PageCount - 1;}
                        <a href="/searchpaging?paging=next&SearchText=@SearchData.SearchText">&#62;</a>
                    </p>
                }
                else
                {
                    <p class="pageButtonDisabled">&gt;</p>
                }
            </td>

            <td>
                @if (SearchData.CurrentPage < SearchData.PageCount - 1)
                {
                    <p class="pageButton">
                        @{var p7 = SearchData.PageCount - 1;}
                        <a href="/searchpaging?paging=@p7&SearchText=@SearchData.SearchText">&#62;|</a>
                    </p>
                }
                else
                {
                    <p class="pageButtonDisabled">&gt;|</p>
                }
            </td>
        </tr>
    </table>
}
@code {

    private SearchDataDto SearchData { get; set; } = new SearchDataDto();

    private int PageNo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("paging", out var queryParamPaging))
        {
            SearchData.Paging = queryParamPaging;
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("SearchText", out var queryParamSearchText))
        {
            SearchData.SearchText = queryParamSearchText;
        }

        if(!string.IsNullOrEmpty(queryParamSearchText) || 
            !string.IsNullOrEmpty(queryParamPaging))
        {
            await Search();
        }
    }

    private async Task Search()
    {
        int page;

        switch (SearchData.Paging)
        {
            case "prev":
                page = PageNo - 1;
                break;

            case "next":
                page = PageNo + 1;
                break;

            default:
                page = int.Parse(SearchData.Paging);
                break;
        }

        int leftMostPage = SearchData.LeftMostPage;

        var searchData = new SearchDataDto
        {
            SearchText = SearchData.SearchText,
            CurrentPage = SearchData.CurrentPage,
            PageCount = SearchData.PageCount,
            LeftMostPage = SearchData.LeftMostPage,
            PageRange = SearchData.PageRange,
            Paging = SearchData.Paging
        };

        var response = await Http.PostAsJsonAsync<SearchDataDto>("api/SearchPaging/Paging", searchData);
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();

        var searchDataResult = System.Text.Json.JsonSerializer.Deserialize<SearchDataDto>(responseBody);

        PageNo = page;
        SearchData = searchDataResult;
    }

}